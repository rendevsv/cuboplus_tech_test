// tech_test.js

// Importar el módulo HTTPS para hacer solicitudes HTTP
const https = require('https');
const AWS = require('aws-sdk');
const dynamoDB = new AWS.DynamoDB.DocumentClient();
const tableName = process.env.STORAGE_BITCOINBALANCES_NAME; // Nombre de la tabla DynamoDB

// Función Lambda para obtener el balance de una dirección  y calcular la variación
exports.handler = async (event) => {
    // Dirección de Bitcoin a consultar
    const address = '32ixEdVJWo3kmvJGMTZq5jAQVZZeuwnqzo';
    // URL del API de mempool.space
    const url = `https://mempool.space/api/address/${address}`;
    // Obtener el timestamp actual en formato UNIX
    const timestamp = Math.floor(Date.now() / 1000);

    return new Promise((resolve, reject) => {
        // Hacer una solicitud HTTP GET al API
        https.get(url, async (resp) => {
            let data = '';

            // Acumular los datos recibidos
            resp.on('data', (chunk) => {
                data += chunk;
            });

            // Procesar los datos cuando la respuesta esté completa
            resp.on('end', async () => {
                const balanceData = JSON.parse(data);
                const confirmedBalance = balanceData.chain_stats.funded_txo_sum - balanceData.chain_stats.spent_txo_sum;
                const mempoolBalance = balanceData.mempool_stats.funded_txo_sum - balanceData.mempool_stats.spent_txo_sum;

                // Guardar balance en DynamoDB
                const params = {
                    TableName: tableName,
                    Item: {
                        address,
                        timestamp,
                        confirmedBalance,
                        mempoolBalance
                    }
                };

                try {
                    await dynamoDB.put(params).promise();

                    // Obtener variaciones de balance
                    const balanceVariation7Days = await getBalanceVariation(address, 7);
                    const balanceVariation30Days = await getBalanceVariation(address, 30);

                    resolve({
                        statusCode: 200,
                        body: JSON.stringify({
                            confirmedBalance,
                            mempoolBalance,
                            balanceVariation7Days,
                            balanceVariation30Days
                        })
                    });
                } catch (error) {
                    reject({
                        statusCode: 500,
                        body: JSON.stringify({ error: error.message })
                    });
                }
            });

        }).on("error", (err) => {
            // Manejar errores en la solicitud
            reject({
                statusCode: 500,
                body: JSON.stringify({ error: err.message }),
            });
        });
    });
};

// Función para calcular la variación del balance
const getBalanceVariation = async (address, days) => {
    const timeRange = Math.floor(Date.now() / 1000) - (days * 24 * 60 * 60); // Timestamp UNIX para los días atrás
    const params = {
        TableName: tableName,
        KeyConditionExpression: 'address = :address AND timestamp >= :timeRange',
        ExpressionAttributeValues: {
            ':address': address,
            ':timeRange': timeRange
        }
    };

    try {
        const result = await dynamoDB.query(params).promise();
        if (result.Items.length > 0) {
            const firstEntry = result.Items[0].confirmedBalance;
            const lastEntry = result.Items[result.Items.length - 1].confirmedBalance;
            return lastEntry - firstEntry; // Retornar la variación de balance en el período
        }
        return 0;
    } catch (error) {
        console.error("Error querying DynamoDB:", error);
        return 0;
    }
};
