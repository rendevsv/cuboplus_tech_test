// tech_test.js

import fetch from 'node-fetch';
import { DynamoDBClient, PutItemCommand, QueryCommand } from '@aws-sdk/client-dynamodb';

const dynamoDB = new DynamoDBClient({ region: 'us-east-1' });
const BITCOIN_ADDRESS = '32ixEdVJWo3kmvJGMTZq5jAQVZZeuwnqzo';

export const handler = async (event) => {
  try {
    // Llamada a la API para obtener el balance de la dirección
    const url = `https://mempool.space/api/address/${BITCOIN_ADDRESS}`;
    const response = await fetch(url);

    // Verificar si la respuesta es correcta
    if (!response.ok) {
      throw new Error(`Error fetching on-chain data: ${response.statusText}`);
    }

    const data = await response.json();

    // Obtener el balance confirmado y el balance del mempool
    const onChainBalance = data.chain_stats.funded_txo_sum - data.chain_stats.spent_txo_sum;
    const mempoolBalance = data.mempool_stats.funded_txo_sum - data.mempool_stats.spent_txo_sum;

    // Guardar el balance actual en DynamoDB con timestamp
    const currentTimestamp = Math.floor(Date.now() / 1000);
    await saveBalanceToDynamoDB(onChainBalance, mempoolBalance, currentTimestamp);

    // Cálculo de variación en periodos reales
    const balanceLast30Days = await fetchBalanceVariation(30, currentTimestamp);
    const balanceLast7Days = await fetchBalanceVariation(7, currentTimestamp);

    return {
      statusCode: 200,
      body: JSON.stringify({
        onChainBalance,
        mempoolBalance,
        balanceLast30Days,
        balanceLast7Days,
      }),
    };
  } catch (error) {
    console.error('Error fetching balance data:', error);
    return {
      statusCode: 500,
      body: JSON.stringify({ message: 'Error fetching data', error: error.message }),
    };
  }
};

// Función para guardar balance en DynamoDB
async function saveBalanceToDynamoDB(onChainBalance, mempoolBalance, timestamp) {
  const params = {
    TableName: 'BitcoinBalanceHistory',
    Item: {
      address: { S: BITCOIN_ADDRESS },
      timestamp: { N: timestamp.toString() },
      onChainBalance: { N: onChainBalance.toString() },
      mempoolBalance: { N: mempoolBalance.toString() }
    }
  };

  await dynamoDB.send(new PutItemCommand(params));
}

// Función para calcular la variación de balance en los últimos 'days' días
async function fetchBalanceVariation(days, currentTimestamp) {
  const pastTimestamp = currentTimestamp - (days * 24 * 60 * 60);

  const params = {
    TableName: 'BitcoinBalanceHistory',
    KeyConditionExpression: '#addr = :address AND #ts BETWEEN :pastTimestamp AND :currentTimestamp',
    ExpressionAttributeNames: {
      '#addr': 'address',
      '#ts': 'timestamp',
    },
    ExpressionAttributeValues: {
      ':address': { S: BITCOIN_ADDRESS },
      ':pastTimestamp': { N: pastTimestamp.toString() },
      ':currentTimestamp': { N: currentTimestamp.toString() },
    }
  };

  const data = await dynamoDB.send(new QueryCommand(params));
  if (data.Items.length > 0) {
    const pastBalance = parseInt(data.Items[0].onChainBalance.N, 10);
    const currentBalance = parseInt(data.Items[data.Items.length - 1].onChainBalance.N, 10);
    return currentBalance - pastBalance;
  } else {
    return 0;
  }
}
